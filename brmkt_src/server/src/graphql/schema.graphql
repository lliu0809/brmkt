# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey
  user: User!
  buyItNows: [BuyItNow!]!
  auctions: [AuctionTopBid!]!
  orders: [Order!]!
  # item (prodId: Int!, prodType: ProdType): Selling

  auctionListing (auctionId: Int!): AuctionTopBid!
  binListing (binId: Int!): BuyItNow!
}

type Mutation {
  placeBid (id: Int!, bid: Float!): Boolean!
  purchase (id: Int!): Boolean!

  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

# type User {
#   id: Int!
#   userType: UserType!
#   email: String!
#   name: String!
# }

enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

#####################################################################################
#                              Start Of Our Query Types                             #
#####################################################################################

type User {
  id: Int!
  userType: UserType!
  name: String!
  address: String!
  email: String!
  password: String!
  cardNumber: String!
}

enum ProdType { BEARWEAR, TEXTBOOKS, DORMSUPPLY, ELECTRONICS, OTHER }
enum OrderType { BUYITNOW, AUCTION }
enum ItemStatus { NOTSOLD, SOLD }

type Auction {
  id: Int!
  title: String!
  price: Float!
  description: String!
  prodType: ProdType!
  seller: Int!
  currentHighest: Int # Highest Bidder's ID
  auctionTime: Int!
  status: ItemStatus!
}

type AuctionTopBid {
  topBid: Float!
  auction: Auction!
}

type BuyItNow {
  id: Int!
  title: String!
  price: Float!
  description: String!
  prodType: ProdType!
  seller: Int!
  buyer: Int
  status: ItemStatus!
}

type Order {
  id: Int!
  prodId: Int!
  sellerId: Int!
  buyerId: Int!
  orderType: OrderType!
}

# type User {
#   id: Int!
#   name: String!
#   email: String!
#   address: String!
#   username: String!
#   password: String!
#   selling: [Item]!
#   orders: [Item]!
#   watching: [Item]!
#   paymentMethod: String
#   cardNumber: Int
# }

# enum ItemType { BUYITNOW, AUCTION }

# type Item {
#   id: Int!
#   title: String!
#   price: Float!
#   shipping: Float!
#   description: String
#   category: String!
#   seller: Int! #user ID
#   buyer: Int #user ID
#   timeAdded: Int #use SQL date & time
#   itemType: ItemType!
#   auctionTime: Int #in seconds?
# }

# type Order {
#   id: Int! #item ID
#   soldItem: Item!
# }
#push again
#####################################################################################
#                              End Of Our Query Types                               #
#####################################################################################